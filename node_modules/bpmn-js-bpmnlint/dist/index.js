'use strict';

var bpmnlint = require('bpmnlint');
var minDash = require('min-dash');
var minDom = require('min-dom');
var EscapeUtil = require('diagram-js/lib/util/EscapeUtil');
var ModelUtil = require('bpmn-js/lib/util/ModelUtil');

function EditorActions(injector, linting) {
  var editorActions = injector.get('editorActions', false);

  editorActions && editorActions.register({
    toggleLinting: function() {
      linting.toggle();
    }
  });
}

EditorActions.$inject = [
  'injector',
  'linting'
];

var ErrorSvg = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   version=\"1.1\"\n   viewBox=\"0 0 512 512\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\">\n  <path\n     d=\"M 339.07183,256.00001 463.66713,131.4047 c 15.28961,-15.2896 15.28961,-40.079175 0,-55.381227 l -27.6906,-27.690611 c -15.28961,-15.289602 -40.07917,-15.289602 -55.38123,0 L 256,172.92818 131.4047,48.332862 c -15.2896,-15.289602 -40.079177,-15.289602 -55.381228,0 L 48.332861,76.023473 c -15.2896,15.2896 -15.2896,40.079177 0,55.381227 L 172.92815,256.00001 48.332861,380.59531 c -15.2896,15.2896 -15.2896,40.07917 0,55.38123 l 27.690611,27.69061 c 15.289601,15.28959 40.091628,15.28959 55.381228,0 L 256,339.07184 380.5953,463.66715 c 15.2896,15.28959 40.09162,15.28959 55.38123,0 l 27.6906,-27.69061 c 15.28961,-15.2896 15.28961,-40.07918 0,-55.38123 z\"\n     fill=\"currentColor\" />\n</svg>\n";

var WarningSvg = "<svg version=\"1.1\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m256 323.95c-45.518 0-82.419 34.576-82.419 77.229 0 42.652 36.9 77.229 82.419 77.229 45.518 0 82.419-34.577 82.419-77.23 0-42.652-36.9-77.229-82.419-77.229zm-80.561-271.8 11.61 204.35c.544 9.334 8.78 16.64 18.755 16.64h100.39c9.975 0 18.211-7.306 18.754-16.64l11.611-204.35c.587-10.082-7.98-18.56-18.754-18.56h-123.62c-10.775 0-19.34 8.478-18.753 18.56z\" fill=\"currentColor\"/>\n</svg>\n";

var SuccessSvg = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   viewBox=\"0 0 512 512\"\n   version=\"1.1\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\">\n  <path\n     fill=\"currentColor\"\n     d=\"m 173.898,439.40356 -166.4,-166.4 c -9.997,-9.997 -9.997,-26.206 0,-36.204 l 36.203,-36.204 c 9.997,-9.998 26.207,-9.998 36.204,0 L 192,312.68956 432.095,72.595562 c 9.997,-9.997 26.207,-9.997 36.204,0 l 36.203,36.203998 c 9.997,9.997 9.997,26.206 0,36.204 l -294.4,294.401 c -9.998,9.997 -26.207,9.997 -36.204,-10e-4 z\" />\n</svg>\n";

var InfoSvg = "<svg\n  viewBox=\"3.5 3.5 9 9\"\n  version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n    fill=\"currentColor\" d=\"M6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z\"></path>\n</svg>";

var OFFSET_TOP = -7,
    OFFSET_RIGHT = -7;

var LOW_PRIORITY = 500;

var emptyConfig = {
  resolver: {
    resolveRule: function() {
      return null;
    }
  },
  config: {}
};

var stateToIcon = {
  error: ErrorSvg,
  warning: WarningSvg,
  success: SuccessSvg,
  info: InfoSvg,
  inactive: SuccessSvg
};

function Linting(
    bpmnjs,
    canvas,
    config,
    elementRegistry,
    eventBus,
    overlays,
    translate
) {
  this._bpmnjs = bpmnjs;
  this._canvas = canvas;
  this._elementRegistry = elementRegistry;
  this._eventBus = eventBus;
  this._overlays = overlays;
  this._translate = translate;

  this._issues = {};

  this._active = config && config.active || false;
  this._linterConfig = emptyConfig;

  this._overlayIds = {};

  var self = this;

  eventBus.on([
    'import.done',
    'elements.changed',
    'linting.configChanged',
    'linting.toggle'
  ], LOW_PRIORITY, function(e) {
    self.update();
  });

  eventBus.on('linting.toggle', function(event) {

    const active = event.active;

    if (!active) {
      self._clearIssues();
      self._updateButton();
    }
  });

  eventBus.on('diagram.clear', function() {
    self._clearIssues();
  });

  var linterConfig = config && config.bpmnlint;

  linterConfig && eventBus.once('diagram.init', function() {

    // bail out if config was already provided
    // during initialization of other modules
    if (self.getLinterConfig() !== emptyConfig) {
      return;
    }

    try {
      self.setLinterConfig(linterConfig);
    } catch (err) {
      console.error(
        '[bpmn-js-bpmnlint] Invalid lint rules configured. ' +
        'Please doublecheck your linting.bpmnlint configuration, ' +
        'cf. https://github.com/bpmn-io/bpmn-js-bpmnlint#configure-lint-rules'
      );
    }
  });

  this._init();
}

Linting.prototype.setLinterConfig = function(linterConfig) {

  if (!linterConfig.config || !linterConfig.resolver) {
    throw new Error('Expected linterConfig = { config, resolver }');
  }

  this._linterConfig = linterConfig;

  this._eventBus.fire('linting.configChanged');
};

Linting.prototype.getLinterConfig = function() {
  return this._linterConfig;
};

Linting.prototype._init = function() {
  this._createButton();

  this._updateButton();
};

Linting.prototype.isActive = function() {
  return this._active;
};

Linting.prototype._formatIssues = function(issues) {

  let self = this;

  // (1) reduce issues to flat list of issues including the affected element
  let reports = minDash.reduce(issues, function(reports, ruleReports, rule) {

    return reports.concat(ruleReports.map(function(report) {
      report.rule = rule;

      return report;
    }));

  }, []);

  // (2) if affected element is not visible, then report it on root or participant level
  const participants = self._elementRegistry.filter((ele) => { return ModelUtil.is(ele, 'bpmn:Participant'); }),
        participantBos = participants.map((ele) => { return ele.businessObject; });

  reports = minDash.map(reports, function(report) {
    const element = self._elementRegistry.get(report.id);

    if (!element) {
      report.isChildIssue = true;
      report.actualElementId = report.id;

      // (2.1) Is a participant referring to the current issue? Then display on participant
      const referringParticipant = participantBos.filter((ele) => {
        return (ele.processRef && ele.processRef.id && ele.processRef.id === report.id);
      });

      if (referringParticipant.length) {
        report.id = referringParticipant[0].id;
      } else {

        // (2.2) If there is no participant to display it on, display it to root
        report.id = self._canvas.getRootElement().id;
      }

    }

    return report;
  });

  // (3) group issues per elementId (resulting in ie. [elementId1: [{issue1}, {issue2}]] structure)
  reports = minDash.groupBy(reports, function(report) {
    return report.id;
  });

  return reports;

};

/**
 * Toggle linting on or off.
 *
 * @param {boolean} [newActive]
 *
 * @return {boolean} the new active state
 */
Linting.prototype.toggle = function(newActive) {

  newActive = typeof newActive === 'undefined' ? !this.isActive() : newActive;

  this._setActive(newActive);

  return newActive;
};

Linting.prototype._setActive = function(active) {

  if (this._active === active) {
    return;
  }

  this._active = active;

  this._eventBus.fire('linting.toggle', { active: active });
};

/**
 * Update overlays. Always lint and check whether overlays need update or not.
 */
Linting.prototype.update = function() {
  var self = this;

  var definitions = this._bpmnjs.getDefinitions();

  if (!definitions) {
    return;
  }

  var lintStart = this._lintStart = Math.random();

  this.lint().then(function(newIssues) {

    if (self._lintStart !== lintStart) {
      return;
    }

    newIssues = self._formatIssues(newIssues);

    var remove = {},
        update = {},
        add = {};

    for (var id1 in self._issues) {
      if (!newIssues[id1]) {
        remove[id1] = self._issues[id1];
      }
    }

    for (var id2 in newIssues) {
      if (!self._issues[id2]) {
        add[id2] = newIssues[id2];
      } else {
        if (newIssues[id2] !== self._issues[id2]) {
          update[id2] = newIssues[id2];
        }
      }
    }

    remove = minDash.assign(remove, update);
    add = minDash.assign(add, update);

    self._clearOverlays();

    if (self.isActive()) {
      self._createIssues(add);
    }

    self._issues = newIssues;

    self._updateButton();

    self._fireComplete(newIssues);
  });
};

Linting.prototype._fireComplete = function(issues) {
  this._eventBus.fire('linting.completed', { issues: issues });
};

Linting.prototype._createIssues = function(issues) {
  for (var id in issues) {
    this._createElementIssues(id, issues[id]);
  }
};

/**
 * Create overlay including all issues which are given for a single element.
 *
 * @param {string} elementId - id of element, for which the issue shall be displayed.
 * @param {Array} elementIssues - All element issues including warnings and errors.
 */
Linting.prototype._createElementIssues = function(elementId, elementIssues) {
  var element = this._elementRegistry.get(elementId);

  if (!element) {
    return;
  }

  // Also attach element to subprocess plane
  var plane = this._elementRegistry.get(elementId + '_plane');
  if (plane) {
    this._createElementIssues(plane.id, elementIssues);
  }

  var menuPosition;
  var position;

  var isRoot = !element.parent;
  if (isRoot && ModelUtil.is(element, 'bpmn:Process')) {
    menuPosition = 'bottom-right';

    position = {
      top: 20,
      left: 150
    };
  } else if (isRoot && ModelUtil.is(element, 'bpmn:SubProcess')) {
    menuPosition = 'bottom-right';

    position = {
      top: 50,
      left: 150
    };
  } else {
    menuPosition = 'top-right';

    position = {
      top: OFFSET_TOP,
      left: OFFSET_RIGHT
    };
  }

  var issuesByType = minDash.groupBy(elementIssues, function(elementIssue) {
    return (elementIssue.isChildIssue ? 'child' : '') + elementIssue.category;
  });

  var errors = issuesByType.error,
      warnings = issuesByType.warn,
      infos = issuesByType.info,
      childErrors = issuesByType.childerror,
      childWarnings = issuesByType.childwarn,
      childInfos = issuesByType.childinfo;

  if (
    !infos &&
    !errors &&
    !warnings &&
    !childErrors &&
    !childWarnings &&
    !childInfos
  ) {
    return;
  }

  var $html = minDom.domify(
    '<div class="bjsl-overlay bjsl-issues-' + menuPosition + '"></div>'
  );

  var $icon = (errors || childErrors)
    ? minDom.domify('<div class="bjsl-icon bjsl-icon-error">' + ErrorSvg + '</div>')
    : (warnings || childWarnings)
      ? minDom.domify('<div class="bjsl-icon bjsl-icon-warning">' + WarningSvg + '</div>')
      : minDom.domify('<div class="bjsl-icon bjsl-icon-info">' + InfoSvg + '</div>');

  var $dropdown = minDom.domify('<div class="bjsl-dropdown"></div>');
  var $dropdownContent = minDom.domify('<div class="bjsl-dropdown-content"></div>');

  var $issueContainer = minDom.domify('<div class="bjsl-issues"></div>');

  var $issues = minDom.domify('<div class="bjsl-current-element-issues"></div>');
  var $issueList = minDom.domify('<ul></ul>');

  $html.appendChild($icon);
  $html.appendChild($dropdown);

  $dropdown.appendChild($dropdownContent);
  $dropdownContent.appendChild($issueContainer);

  $issueContainer.appendChild($issues);

  $issues.appendChild($issueList);

  // Add errors and warnings to issueList
  if (errors) {
    this._addErrors($issueList, errors);
  }

  if (warnings) {
    this._addWarnings($issueList, warnings);
  }

  if (infos) {
    this._addInfos($issueList, infos);
  }

  // If errors or warnings for child elements of the current element are to be displayed,
  // then add an additional list
  if (childErrors || childWarnings || childInfos) {
    var $childIssues = minDom.domify('<div class="bjsl-child-issues"></div>');
    var $childIssueList = minDom.domify('<ul></ul>');
    var childLabel = this._translate('Issues for child elements');
    var $childIssueLabel = minDom.domify('<a class="bjsl-issue-heading">' + childLabel + ':</a>');

    if (childErrors) {
      this._addErrors($childIssueList, childErrors);
    }

    if (childWarnings) {
      this._addWarnings($childIssueList, childWarnings);
    }

    if (childInfos) {
      this._addInfos($childIssueList, childInfos);
    }

    if (errors || warnings) {
      var $childIssuesSeparator = minDom.domify('<hr/>');
      $childIssues.appendChild($childIssuesSeparator);
    }

    $childIssues.appendChild($childIssueLabel);
    $childIssues.appendChild($childIssueList);
    $issueContainer.appendChild($childIssues);
  }

  this._overlayIds[elementId] = this._overlays.add(element, 'linting', {
    position: position,
    html: $html,
    scale: {
      min: .7
    }
  });
};

Linting.prototype._addErrors = function($ul, errors) {

  var self = this;

  errors.forEach(function(error) {
    self._addEntry($ul, 'error', error);
  });
};

Linting.prototype._addWarnings = function($ul, warnings) {

  var self = this;

  warnings.forEach(function(error) {
    self._addEntry($ul, 'warning', error);
  });
};

Linting.prototype._addInfos = function($ul, infos) {

  var self = this;

  infos.forEach(function(error) {
    self._addEntry($ul, 'info', error);
  });
};

Linting.prototype._addEntry = function($ul, state, entry) {

  var rule = entry.rule,
      documentationUrl = entry.meta?.documentation.url,
      message = this._translate(entry.message),
      actualElementId = entry.actualElementId;

  var icon = stateToIcon[state];

  var $entry = minDom.domify(`
    <li class="${ state }" data-rule="${ EscapeUtil.escapeHTML(rule) }">
      <span class="icon">${ icon }</span>
      <span class="message">${ EscapeUtil.escapeHTML(message) }</span>
      <span class="rule">(${ documentationUrl
    ? `<a href="${ EscapeUtil.escapeHTML(documentationUrl) }" target="_blank">${ EscapeUtil.escapeHTML(rule) }</a>`
    : EscapeUtil.escapeHTML(rule) })</span>
      ${ actualElementId
    ? `<span class="bjsl-id-hint"><code>${ EscapeUtil.escapeHTML(actualElementId) }</code></span>`
    : '' }
    </li>
  `);

  $ul.appendChild($entry);
};

Linting.prototype._clearOverlays = function() {
  this._overlays.remove({ type: 'linting' });

  this._overlayIds = {};
};

Linting.prototype._clearIssues = function() {
  this._issues = {};

  this._clearOverlays();
};

Linting.prototype._setButtonState = function(issues) {
  var {
    errors,
    warnings,
    infos
  } = issues;

  var button = this._button;

  var state = (errors && 'error') || (warnings && 'warning') || 'success';

  var icon = stateToIcon[state];
  var label = this._translate(
    (errors || warnings)
      ? '{errors} Errors, {warnings} Warnings'
      : 'No Issues',
    {
      errors: String(errors),
      warnings: String(warnings),
      infos: String(infos),
    }
  );

  var html = `
    <span class="icon">${icon}</span>
    <span>${ label }</span>`;

  state = this.isActive() ? state : 'inactive';

  [
    'error',
    'inactive',
    'success',
    'warning'
  ].forEach(function(s) {
    if (state === s) {
      button.classList.add('bjsl-button-' + s);
    } else {
      button.classList.remove('bjsl-button-' + s);
    }
  });

  button.innerHTML = html;
};

Linting.prototype._updateButton = function() {

  var errors = 0,
      warnings = 0,
      infos = 0;

  for (var id in this._issues) {
    this._issues[id].forEach(function(issue) {
      if (issue.category === 'error') {
        errors++;
      } else if (issue.category === 'warn') {
        warnings++;
      } else if (issue.category === 'info') {
        infos++;
      }
    });
  }

  this._setButtonState({
    errors,
    warnings,
    infos
  });
};

Linting.prototype._createButton = function() {

  var self = this;

  this._button = minDom.domify(
    '<button class="bjsl-button bjsl-button-inactive" title="' + this._translate('Toggle linting overlays') + '"></button>'
  );

  this._button.addEventListener('click', function() {
    self.toggle();
  });

  this._canvas.getContainer().appendChild(this._button);
};

Linting.prototype.lint = function() {
  var definitions = this._bpmnjs.getDefinitions();

  var linter = new bpmnlint.Linter(this._linterConfig);

  return linter.lint(definitions);
};

Linting.$inject = [
  'bpmnjs',
  'canvas',
  'config.linting',
  'elementRegistry',
  'eventBus',
  'overlays',
  'translate'
];

var index = {
  __init__: [ 'linting', 'lintingEditorActions' ],
  linting: [ 'type', Linting ],
  lintingEditorActions: [ 'type', EditorActions ]
};

module.exports = index;
//# sourceMappingURL=index.js.map
